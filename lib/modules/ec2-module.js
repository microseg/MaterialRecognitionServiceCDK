"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EC2Module = void 0;
const cdk = require("aws-cdk-lib");
const ec2 = require("aws-cdk-lib/aws-ec2");
const iam = require("aws-cdk-lib/aws-iam");
const constructs_1 = require("constructs");
class EC2Module extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Create IAM role for the EC2 instance
        this.instanceRole = new iam.Role(this, 'DeploymentInstanceRole', {
            assumedBy: new iam.ServicePrincipal('ec2.amazonaws.com'),
            managedPolicies: [
                iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonSSMManagedInstanceCore'),
                iam.ManagedPolicy.fromAwsManagedPolicyName('CloudWatchAgentServerPolicy'),
            ],
        });
        // Add custom policy for S3 access (if needed for deployment artifacts)
        this.instanceRole.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                's3:GetObject',
                's3:GetObjectVersion',
                's3:ListBucket',
            ],
            resources: [
                'arn:aws:s3:::aws-codepipeline-*',
                'arn:aws:s3:::aws-codepipeline-*/*',
                'arn:aws:s3:::materialrecognitionservic-*',
                'arn:aws:s3:::materialrecognitionservic-*/*',
            ],
        }));
        // Add CodeDeploy permissions for the EC2 instance
        this.instanceRole.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                'codedeploy:*',
            ],
            resources: ['*'],
        }));
        // Create security group for the deployment instance
        const deploymentSecurityGroup = new ec2.SecurityGroup(this, 'DeploymentInstanceSecurityGroup', {
            vpc: props.vpc,
            description: 'Security group for Material Recognition Service deployment instance',
            allowAllOutbound: true,
        });
        // Allow SSH access from anywhere (for testing purposes)
        deploymentSecurityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(22), 'Allow SSH access');
        // Allow HTTP access for the application
        deploymentSecurityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(80), 'Allow HTTP access');
        // Allow HTTPS access for the application
        deploymentSecurityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(443), 'Allow HTTPS access');
        // Allow application port (assuming Flask app runs on 5000)
        deploymentSecurityGroup.addIngressRule(ec2.Peer.anyIpv4(), ec2.Port.tcp(5000), 'Allow application access');
        // Create user data script for instance initialization
        const userData = ec2.UserData.forLinux();
        userData.addCommands('#!/bin/bash', 'yum update -y', 'yum install -y git python3 python3-pip nginx', 'systemctl enable nginx', 'systemctl start nginx', '', '# Create application directory', 'mkdir -p /opt/material-recognition-service', 'chown ec2-user:ec2-user /opt/material-recognition-service', '', '# Install Python dependencies', 'pip3 install flask gunicorn', '', '# Configure nginx as reverse proxy', 'cat > /etc/nginx/conf.d/material-recognition.conf << EOF', 'server {', '    listen 80;', '    server_name _;', '    location / {', '        proxy_pass http://127.0.0.1:5000;', '        proxy_set_header Host $host;', '        proxy_set_header X-Real-IP $remote_addr;', '        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;', '        proxy_set_header X-Forwarded-Proto $scheme;', '    }', '}', 'EOF', '', '# Reload nginx configuration', 'nginx -t && systemctl reload nginx', '', '# Create systemd service for the application', 'cat > /etc/systemd/system/material-recognition.service << EOF', '[Unit]', 'Description=Material Recognition Service', 'After=network.target', '', '[Service]', 'Type=simple', 'User=ec2-user', 'WorkingDirectory=/opt/material-recognition-service', 'ExecStart=/usr/local/bin/gunicorn -w 4 -b 0.0.0.0:5000 app:app', 'Restart=always', '', '[Install]', 'WantedBy=multi-user.target', 'EOF', '', '# Enable and start the service', 'systemctl enable material-recognition.service', 'systemctl start material-recognition.service');
        // Create the EC2 instance
        this.deploymentInstance = new ec2.Instance(this, 'DeploymentInstance', {
            vpc: props.vpc,
            vpcSubnets: {
                subnetType: ec2.SubnetType.PUBLIC,
            },
            instanceType: ec2.InstanceType.of(ec2.InstanceClass.T3, ec2.InstanceSize.MICRO),
            machineImage: new ec2.AmazonLinuxImage({
                generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,
            }),
            // keyName: props.keyName, // Removed to avoid key pair dependency
            role: this.instanceRole,
            securityGroup: deploymentSecurityGroup,
            userData: userData,
            blockDevices: [
                {
                    deviceName: '/dev/xvda',
                    volume: ec2.BlockDeviceVolume.ebs(20, {
                        volumeType: ec2.EbsDeviceVolumeType.GP3,
                        deleteOnTermination: true,
                    }),
                },
            ],
        });
        // Tag the instance
        cdk.Tags.of(this.deploymentInstance).add('Project', 'MaterialRecognitionService');
        cdk.Tags.of(this.deploymentInstance).add('Environment', 'Development');
        cdk.Tags.of(this.deploymentInstance).add('Purpose', 'Deployment');
    }
}
exports.EC2Module = EC2Module;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWMyLW1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImVjMi1tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQW1DO0FBQ25DLDJDQUEyQztBQUMzQywyQ0FBMkM7QUFDM0MsMkNBQXVDO0FBUXZDLE1BQWEsU0FBVSxTQUFRLHNCQUFTO0lBSXRDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBcUI7UUFDN0QsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQix1Q0FBdUM7UUFDdkMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLHdCQUF3QixFQUFFO1lBQy9ELFNBQVMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxtQkFBbUIsQ0FBQztZQUN4RCxlQUFlLEVBQUU7Z0JBQ2YsR0FBRyxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyw4QkFBOEIsQ0FBQztnQkFDMUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyw2QkFBNkIsQ0FBQzthQUMxRTtTQUNGLENBQUMsQ0FBQztRQUVILHVFQUF1RTtRQUN2RSxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FDM0IsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDO1lBQ3RCLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUs7WUFDeEIsT0FBTyxFQUFFO2dCQUNQLGNBQWM7Z0JBQ2QscUJBQXFCO2dCQUNyQixlQUFlO2FBQ2hCO1lBQ0QsU0FBUyxFQUFFO2dCQUNULGlDQUFpQztnQkFDakMsbUNBQW1DO2dCQUNuQywwQ0FBMEM7Z0JBQzFDLDRDQUE0QzthQUM3QztTQUNGLENBQUMsQ0FDSCxDQUFDO1FBRUYsa0RBQWtEO1FBQ2xELElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUMzQixJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUM7WUFDdEIsTUFBTSxFQUFF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LEVBQ3BCLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUN2QjtZQUNELFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDckMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxjQUFjO2FBQ3JELENBQUM7WUFDRixrRUFBa0U7WUFDbEUsSUFBSSxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQ3ZCLGFBQWEsRUFBRSx1QkFBdUI7WUFDdEMsUUFBUSxFQUFFLFFBQVE7WUFDbEIsWUFBWSxFQUFFO2dCQUNaO29CQUNFLFVBQVUsRUFBRSxXQUFXO29CQUN2QixNQUFNLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUU7d0JBQ3BDLFVBQVUsRUFBRSxHQUFHLENBQUMsbUJBQW1CLENBQUMsR0FBRzt3QkFDdkMsbUJBQW1CLEVBQUUsSUFBSTtxQkFDMUIsQ0FBQztpQkFDSDthQUNGO1NBQ0YsQ0FBQyxDQUFDO1FBRUgsbUJBQW1CO1FBQ25CLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztRQUNsRixHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3ZFLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDcEUsQ0FBQztDQUNGO0FBektELDhCQXlLQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBlYzIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMic7XG5pbXBvcnQgKiBhcyBpYW0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcblxuZXhwb3J0IGludGVyZmFjZSBFQzJNb2R1bGVQcm9wcyB7XG4gIHZwYzogZWMyLklWcGM7XG4gIGluc3RhbmNlVHlwZT86IHN0cmluZztcbiAga2V5TmFtZT86IHN0cmluZzsgLy8gTWFkZSBvcHRpb25hbFxufVxuXG5leHBvcnQgY2xhc3MgRUMyTW9kdWxlIGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgcHVibGljIHJlYWRvbmx5IGRlcGxveW1lbnRJbnN0YW5jZTogZWMyLkluc3RhbmNlO1xuICBwdWJsaWMgcmVhZG9ubHkgaW5zdGFuY2VSb2xlOiBpYW0uUm9sZTtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRUMyTW9kdWxlUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgLy8gQ3JlYXRlIElBTSByb2xlIGZvciB0aGUgRUMyIGluc3RhbmNlXG4gICAgdGhpcy5pbnN0YW5jZVJvbGUgPSBuZXcgaWFtLlJvbGUodGhpcywgJ0RlcGxveW1lbnRJbnN0YW5jZVJvbGUnLCB7XG4gICAgICBhc3N1bWVkQnk6IG5ldyBpYW0uU2VydmljZVByaW5jaXBhbCgnZWMyLmFtYXpvbmF3cy5jb20nKSxcbiAgICAgIG1hbmFnZWRQb2xpY2llczogW1xuICAgICAgICBpYW0uTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoJ0FtYXpvblNTTU1hbmFnZWRJbnN0YW5jZUNvcmUnKSxcbiAgICAgICAgaWFtLk1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKCdDbG91ZFdhdGNoQWdlbnRTZXJ2ZXJQb2xpY3knKSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICAvLyBBZGQgY3VzdG9tIHBvbGljeSBmb3IgUzMgYWNjZXNzIChpZiBuZWVkZWQgZm9yIGRlcGxveW1lbnQgYXJ0aWZhY3RzKVxuICAgIHRoaXMuaW5zdGFuY2VSb2xlLmFkZFRvUG9saWN5KFxuICAgICAgbmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICBlZmZlY3Q6IGlhbS5FZmZlY3QuQUxMT1csXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAnczM6R2V0T2JqZWN0JyxcbiAgICAgICAgICAnczM6R2V0T2JqZWN0VmVyc2lvbicsXG4gICAgICAgICAgJ3MzOkxpc3RCdWNrZXQnLFxuICAgICAgICBdLFxuICAgICAgICByZXNvdXJjZXM6IFtcbiAgICAgICAgICAnYXJuOmF3czpzMzo6OmF3cy1jb2RlcGlwZWxpbmUtKicsXG4gICAgICAgICAgJ2Fybjphd3M6czM6Ojphd3MtY29kZXBpcGVsaW5lLSovKicsXG4gICAgICAgICAgJ2Fybjphd3M6czM6OjptYXRlcmlhbHJlY29nbml0aW9uc2VydmljLSonLFxuICAgICAgICAgICdhcm46YXdzOnMzOjo6bWF0ZXJpYWxyZWNvZ25pdGlvbnNlcnZpYy0qLyonLFxuICAgICAgICBdLFxuICAgICAgfSlcbiAgICApO1xuXG4gICAgLy8gQWRkIENvZGVEZXBsb3kgcGVybWlzc2lvbnMgZm9yIHRoZSBFQzIgaW5zdGFuY2VcbiAgICB0aGlzLmluc3RhbmNlUm9sZS5hZGRUb1BvbGljeShcbiAgICAgIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgZWZmZWN0OiBpYW0uRWZmZWN0LkFMTE9XLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgJ2NvZGVkZXBsb3k6KicsXG4gICAgICAgIF0sXG4gICAgICAgIHJlc291cmNlczogWycqJ10sXG4gICAgICB9KVxuICAgICk7XG5cbiAgICAvLyBDcmVhdGUgc2VjdXJpdHkgZ3JvdXAgZm9yIHRoZSBkZXBsb3ltZW50IGluc3RhbmNlXG4gICAgY29uc3QgZGVwbG95bWVudFNlY3VyaXR5R3JvdXAgPSBuZXcgZWMyLlNlY3VyaXR5R3JvdXAodGhpcywgJ0RlcGxveW1lbnRJbnN0YW5jZVNlY3VyaXR5R3JvdXAnLCB7XG4gICAgICB2cGM6IHByb3BzLnZwYyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnU2VjdXJpdHkgZ3JvdXAgZm9yIE1hdGVyaWFsIFJlY29nbml0aW9uIFNlcnZpY2UgZGVwbG95bWVudCBpbnN0YW5jZScsXG4gICAgICBhbGxvd0FsbE91dGJvdW5kOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgLy8gQWxsb3cgU1NIIGFjY2VzcyBmcm9tIGFueXdoZXJlIChmb3IgdGVzdGluZyBwdXJwb3NlcylcbiAgICBkZXBsb3ltZW50U2VjdXJpdHlHcm91cC5hZGRJbmdyZXNzUnVsZShcbiAgICAgIGVjMi5QZWVyLmFueUlwdjQoKSxcbiAgICAgIGVjMi5Qb3J0LnRjcCgyMiksXG4gICAgICAnQWxsb3cgU1NIIGFjY2VzcydcbiAgICApO1xuXG4gICAgLy8gQWxsb3cgSFRUUCBhY2Nlc3MgZm9yIHRoZSBhcHBsaWNhdGlvblxuICAgIGRlcGxveW1lbnRTZWN1cml0eUdyb3VwLmFkZEluZ3Jlc3NSdWxlKFxuICAgICAgZWMyLlBlZXIuYW55SXB2NCgpLFxuICAgICAgZWMyLlBvcnQudGNwKDgwKSxcbiAgICAgICdBbGxvdyBIVFRQIGFjY2VzcydcbiAgICApO1xuXG4gICAgLy8gQWxsb3cgSFRUUFMgYWNjZXNzIGZvciB0aGUgYXBwbGljYXRpb25cbiAgICBkZXBsb3ltZW50U2VjdXJpdHlHcm91cC5hZGRJbmdyZXNzUnVsZShcbiAgICAgIGVjMi5QZWVyLmFueUlwdjQoKSxcbiAgICAgIGVjMi5Qb3J0LnRjcCg0NDMpLFxuICAgICAgJ0FsbG93IEhUVFBTIGFjY2VzcydcbiAgICApO1xuXG4gICAgLy8gQWxsb3cgYXBwbGljYXRpb24gcG9ydCAoYXNzdW1pbmcgRmxhc2sgYXBwIHJ1bnMgb24gNTAwMClcbiAgICBkZXBsb3ltZW50U2VjdXJpdHlHcm91cC5hZGRJbmdyZXNzUnVsZShcbiAgICAgIGVjMi5QZWVyLmFueUlwdjQoKSxcbiAgICAgIGVjMi5Qb3J0LnRjcCg1MDAwKSxcbiAgICAgICdBbGxvdyBhcHBsaWNhdGlvbiBhY2Nlc3MnXG4gICAgKTtcblxuICAgIC8vIENyZWF0ZSB1c2VyIGRhdGEgc2NyaXB0IGZvciBpbnN0YW5jZSBpbml0aWFsaXphdGlvblxuICAgIGNvbnN0IHVzZXJEYXRhID0gZWMyLlVzZXJEYXRhLmZvckxpbnV4KCk7XG4gICAgdXNlckRhdGEuYWRkQ29tbWFuZHMoXG4gICAgICAnIyEvYmluL2Jhc2gnLFxuICAgICAgJ3l1bSB1cGRhdGUgLXknLFxuICAgICAgJ3l1bSBpbnN0YWxsIC15IGdpdCBweXRob24zIHB5dGhvbjMtcGlwIG5naW54JyxcbiAgICAgICdzeXN0ZW1jdGwgZW5hYmxlIG5naW54JyxcbiAgICAgICdzeXN0ZW1jdGwgc3RhcnQgbmdpbngnLFxuICAgICAgJycsXG4gICAgICAnIyBDcmVhdGUgYXBwbGljYXRpb24gZGlyZWN0b3J5JyxcbiAgICAgICdta2RpciAtcCAvb3B0L21hdGVyaWFsLXJlY29nbml0aW9uLXNlcnZpY2UnLFxuICAgICAgJ2Nob3duIGVjMi11c2VyOmVjMi11c2VyIC9vcHQvbWF0ZXJpYWwtcmVjb2duaXRpb24tc2VydmljZScsXG4gICAgICAnJyxcbiAgICAgICcjIEluc3RhbGwgUHl0aG9uIGRlcGVuZGVuY2llcycsXG4gICAgICAncGlwMyBpbnN0YWxsIGZsYXNrIGd1bmljb3JuJyxcbiAgICAgICcnLFxuICAgICAgJyMgQ29uZmlndXJlIG5naW54IGFzIHJldmVyc2UgcHJveHknLFxuICAgICAgJ2NhdCA+IC9ldGMvbmdpbngvY29uZi5kL21hdGVyaWFsLXJlY29nbml0aW9uLmNvbmYgPDwgRU9GJyxcbiAgICAgICdzZXJ2ZXIgeycsXG4gICAgICAnICAgIGxpc3RlbiA4MDsnLFxuICAgICAgJyAgICBzZXJ2ZXJfbmFtZSBfOycsXG4gICAgICAnICAgIGxvY2F0aW9uIC8geycsXG4gICAgICAnICAgICAgICBwcm94eV9wYXNzIGh0dHA6Ly8xMjcuMC4wLjE6NTAwMDsnLFxuICAgICAgJyAgICAgICAgcHJveHlfc2V0X2hlYWRlciBIb3N0ICRob3N0OycsXG4gICAgICAnICAgICAgICBwcm94eV9zZXRfaGVhZGVyIFgtUmVhbC1JUCAkcmVtb3RlX2FkZHI7JyxcbiAgICAgICcgICAgICAgIHByb3h5X3NldF9oZWFkZXIgWC1Gb3J3YXJkZWQtRm9yICRwcm94eV9hZGRfeF9mb3J3YXJkZWRfZm9yOycsXG4gICAgICAnICAgICAgICBwcm94eV9zZXRfaGVhZGVyIFgtRm9yd2FyZGVkLVByb3RvICRzY2hlbWU7JyxcbiAgICAgICcgICAgfScsXG4gICAgICAnfScsXG4gICAgICAnRU9GJyxcbiAgICAgICcnLFxuICAgICAgJyMgUmVsb2FkIG5naW54IGNvbmZpZ3VyYXRpb24nLFxuICAgICAgJ25naW54IC10ICYmIHN5c3RlbWN0bCByZWxvYWQgbmdpbngnLFxuICAgICAgJycsXG4gICAgICAnIyBDcmVhdGUgc3lzdGVtZCBzZXJ2aWNlIGZvciB0aGUgYXBwbGljYXRpb24nLFxuICAgICAgJ2NhdCA+IC9ldGMvc3lzdGVtZC9zeXN0ZW0vbWF0ZXJpYWwtcmVjb2duaXRpb24uc2VydmljZSA8PCBFT0YnLFxuICAgICAgJ1tVbml0XScsXG4gICAgICAnRGVzY3JpcHRpb249TWF0ZXJpYWwgUmVjb2duaXRpb24gU2VydmljZScsXG4gICAgICAnQWZ0ZXI9bmV0d29yay50YXJnZXQnLFxuICAgICAgJycsXG4gICAgICAnW1NlcnZpY2VdJyxcbiAgICAgICdUeXBlPXNpbXBsZScsXG4gICAgICAnVXNlcj1lYzItdXNlcicsXG4gICAgICAnV29ya2luZ0RpcmVjdG9yeT0vb3B0L21hdGVyaWFsLXJlY29nbml0aW9uLXNlcnZpY2UnLFxuICAgICAgICAgICAgICdFeGVjU3RhcnQ9L3Vzci9sb2NhbC9iaW4vZ3VuaWNvcm4gLXcgNCAtYiAwLjAuMC4wOjUwMDAgYXBwOmFwcCcsXG4gICAgICAnUmVzdGFydD1hbHdheXMnLFxuICAgICAgJycsXG4gICAgICAnW0luc3RhbGxdJyxcbiAgICAgICdXYW50ZWRCeT1tdWx0aS11c2VyLnRhcmdldCcsXG4gICAgICAnRU9GJyxcbiAgICAgICcnLFxuICAgICAgJyMgRW5hYmxlIGFuZCBzdGFydCB0aGUgc2VydmljZScsXG4gICAgICAnc3lzdGVtY3RsIGVuYWJsZSBtYXRlcmlhbC1yZWNvZ25pdGlvbi5zZXJ2aWNlJyxcbiAgICAgICdzeXN0ZW1jdGwgc3RhcnQgbWF0ZXJpYWwtcmVjb2duaXRpb24uc2VydmljZSdcbiAgICApO1xuXG4gICAgLy8gQ3JlYXRlIHRoZSBFQzIgaW5zdGFuY2VcbiAgICB0aGlzLmRlcGxveW1lbnRJbnN0YW5jZSA9IG5ldyBlYzIuSW5zdGFuY2UodGhpcywgJ0RlcGxveW1lbnRJbnN0YW5jZScsIHtcbiAgICAgIHZwYzogcHJvcHMudnBjLFxuICAgICAgdnBjU3VibmV0czoge1xuICAgICAgICBzdWJuZXRUeXBlOiBlYzIuU3VibmV0VHlwZS5QVUJMSUMsXG4gICAgICB9LFxuICAgICAgaW5zdGFuY2VUeXBlOiBlYzIuSW5zdGFuY2VUeXBlLm9mKFxuICAgICAgICBlYzIuSW5zdGFuY2VDbGFzcy5UMyxcbiAgICAgICAgZWMyLkluc3RhbmNlU2l6ZS5NSUNST1xuICAgICAgKSxcbiAgICAgIG1hY2hpbmVJbWFnZTogbmV3IGVjMi5BbWF6b25MaW51eEltYWdlKHtcbiAgICAgICAgZ2VuZXJhdGlvbjogZWMyLkFtYXpvbkxpbnV4R2VuZXJhdGlvbi5BTUFaT05fTElOVVhfMixcbiAgICAgIH0pLFxuICAgICAgLy8ga2V5TmFtZTogcHJvcHMua2V5TmFtZSwgLy8gUmVtb3ZlZCB0byBhdm9pZCBrZXkgcGFpciBkZXBlbmRlbmN5XG4gICAgICByb2xlOiB0aGlzLmluc3RhbmNlUm9sZSxcbiAgICAgIHNlY3VyaXR5R3JvdXA6IGRlcGxveW1lbnRTZWN1cml0eUdyb3VwLFxuICAgICAgdXNlckRhdGE6IHVzZXJEYXRhLFxuICAgICAgYmxvY2tEZXZpY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBkZXZpY2VOYW1lOiAnL2Rldi94dmRhJyxcbiAgICAgICAgICB2b2x1bWU6IGVjMi5CbG9ja0RldmljZVZvbHVtZS5lYnMoMjAsIHtcbiAgICAgICAgICAgIHZvbHVtZVR5cGU6IGVjMi5FYnNEZXZpY2VWb2x1bWVUeXBlLkdQMyxcbiAgICAgICAgICAgIGRlbGV0ZU9uVGVybWluYXRpb246IHRydWUsXG4gICAgICAgICAgfSksXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgLy8gVGFnIHRoZSBpbnN0YW5jZVxuICAgIGNkay5UYWdzLm9mKHRoaXMuZGVwbG95bWVudEluc3RhbmNlKS5hZGQoJ1Byb2plY3QnLCAnTWF0ZXJpYWxSZWNvZ25pdGlvblNlcnZpY2UnKTtcbiAgICBjZGsuVGFncy5vZih0aGlzLmRlcGxveW1lbnRJbnN0YW5jZSkuYWRkKCdFbnZpcm9ubWVudCcsICdEZXZlbG9wbWVudCcpO1xuICAgIGNkay5UYWdzLm9mKHRoaXMuZGVwbG95bWVudEluc3RhbmNlKS5hZGQoJ1B1cnBvc2UnLCAnRGVwbG95bWVudCcpO1xuICB9XG59XG4iXX0=